// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"api-ticketing/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewIpaymuRepository creates a new instance of IpaymuRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIpaymuRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IpaymuRepository {
	mock := &IpaymuRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IpaymuRepository is an autogenerated mock type for the IpaymuRepository type
type IpaymuRepository struct {
	mock.Mock
}

type IpaymuRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IpaymuRepository) EXPECT() *IpaymuRepository_Expecter {
	return &IpaymuRepository_Expecter{mock: &_m.Mock}
}

// CreatePayment provides a mock function for the type IpaymuRepository
func (_mock *IpaymuRepository) CreatePayment(body []byte, payload domain.PaymentHeader) (*domain.PaymentResponse, error) {
	ret := _mock.Called(body, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 *domain.PaymentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte, domain.PaymentHeader) (*domain.PaymentResponse, error)); ok {
		return returnFunc(body, payload)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte, domain.PaymentHeader) *domain.PaymentResponse); ok {
		r0 = returnFunc(body, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PaymentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte, domain.PaymentHeader) error); ok {
		r1 = returnFunc(body, payload)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IpaymuRepository_CreatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePayment'
type IpaymuRepository_CreatePayment_Call struct {
	*mock.Call
}

// CreatePayment is a helper method to define mock.On call
//   - body []byte
//   - payload domain.PaymentHeader
func (_e *IpaymuRepository_Expecter) CreatePayment(body interface{}, payload interface{}) *IpaymuRepository_CreatePayment_Call {
	return &IpaymuRepository_CreatePayment_Call{Call: _e.mock.On("CreatePayment", body, payload)}
}

func (_c *IpaymuRepository_CreatePayment_Call) Run(run func(body []byte, payload domain.PaymentHeader)) *IpaymuRepository_CreatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		var arg1 domain.PaymentHeader
		if args[1] != nil {
			arg1 = args[1].(domain.PaymentHeader)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IpaymuRepository_CreatePayment_Call) Return(paymentResponse *domain.PaymentResponse, err error) *IpaymuRepository_CreatePayment_Call {
	_c.Call.Return(paymentResponse, err)
	return _c
}

func (_c *IpaymuRepository_CreatePayment_Call) RunAndReturn(run func(body []byte, payload domain.PaymentHeader) (*domain.PaymentResponse, error)) *IpaymuRepository_CreatePayment_Call {
	_c.Call.Return(run)
	return _c
}
